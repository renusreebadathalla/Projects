import numpy as np 
import pandas as pd 
import string
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score 
import nltk
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
dataframe = pd.read_csv('/fakereviews.csv')
dataframe.head() 
dataframe.dropna(inplace=True)
dataframe['length'] = dataframe['text_'].apply(len) 
dataframe[dataframe['label']=='OR'][['text_','length']].sort_values(by='length',ascending=False).head().iloc[0].text_ 
def convertmyTxt(rv): 
    np = [c for c in rv if c not in string.punctuation]
    np = ''.join(np) 
    return [w for w in np.split() if w.lower() not in stopwords.words('english')] 
 
x_train, x_test, y_train, y_test = train_test_split(dataframe['text_'],dataframe['label'],test_size=0.25)
pip = Pipeline([
    ('bow',CountVectorizer(analyzer=convertmyTxt)),
    ('tfidf',TfidfTransformer()),
    ('classifier',RandomForestClassifier())
]) 
import nltk
nltk.download('stopwords')
pip.fit(x_train,y_train)
randomForestClassifier = pip.predict(x_test) 
randomForestClassifier
print('Accuracy of the model: ',str(np.round(accuracy_score(y_test,randomForestClassifier)*100,2)) + '%')
pip = Pipeline([
    ('bow',CountVectorizer(analyzer=convertmyTxt)),
    ('tfidf',TfidfTransformer()),
    ('classifier',SVC())
])
pip.fit(x_train,y_train)
supportVectorClassifier = pip.predict(x_test)
supportVectorClassifier
print('accuracy of the model:',str(np.round(accuracy_score(y_test,supportVectorClassifier)*100,2)) + '%')
pip = Pipeline([
    ('bow',CountVectorizer(analyzer=text_process)),
    ('tfidf',TfidfTransformer()),
    ('classifier',LogisticRegression())
])
pip.fit(x_train,y_train)
logisticRegression = pip.predict(x_test)
logisticRegression
print('accuracy of the model:',str(np.round(accuracy_score(y_test,logisticRegression)*100,2)) + '%')
